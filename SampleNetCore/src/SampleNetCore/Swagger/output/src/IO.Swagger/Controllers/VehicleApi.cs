/*
 * REST API Documentation
 *
 * API Sample
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;
using Npgsql;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class VehicleApiController : Controller
    {
        private DbTestContext _context;

        /// <summary>
        /// 
        /// </summary>

        public VehicleApiController(DbTestContext context)
        {
            _context = context;
        }

        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/Vehicles")]
        [SwaggerOperation("VehiclesGet")]
        [SwaggerResponse(200, type: typeof(List<Vehicle>))]
        public virtual IActionResult VehiclesGet()
        { 
            string exampleJson = null;

            /*var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Vehicle>>(exampleJson)
            : default(List<Vehicle>);
            */
            var example = _context.Vehicles.ToList();

            return new ObjectResult(example);
        }

        [HttpGet]
        [Route("/Create")]
        [SwaggerOperation("VehiclesCreate")]
        [SwaggerResponse(200, type: typeof(String))]
        public virtual IActionResult CreateVehicle()
        {
            // create a vehicle.
            Vehicle vehicle = new Models.Vehicle();


            Random r = new Random();
            int rInt = r.Next(0, 100); //for ints

            vehicle.DisplayName = "Sample Vehicle - " + rInt;
            vehicle.Description = "Sample Description.";
            _context.Vehicles.Add(vehicle);
            _context.SaveChanges();

            var example = _context.Vehicles.ToList();

            return new ObjectResult(example);
        }

        [HttpGet]
        [Route("/db")]
        
        [SwaggerResponse(200, type: typeof(String))]
        public virtual IActionResult DbGet()
        {
            string exampleJson = null;

            var example = "This is just a test.";
            // using (var conn = new NpgsqlConnection("Host=127.0.0.1;Username=test;Password=test161107;Database=test"))
            try
            {


                using (var conn = new NpgsqlConnection("Host=172.30.36.242;Username=test;Password=test161107;Database=test"))
                {
                    conn.Open();
                    if (conn.State == System.Data.ConnectionState.Open)
                    {
                        example = "connected to the database.";
                    }
                    else
                    {
                        example = "not connected to the database.";
                    }
                }
            }
            catch (Exception e)
            {
                example = "exception occured. " + e.ToString() ;
            }


            return new ObjectResult(example);
        }
    }
}
